/*************************************************************
	Практическое занятие №5. Структуры
//динамический массив структур
//поиск
//сортировка
//сохранение в файле
//чтение из файла
*************************************************************/

#include "book.h"

#define	  stop __asm nop

int main()
{
	//Используйте структуру BOOK, созданную в предыдущей работе.
	//Для этого достаточно переписать и подключить к проекту файлы
	//book.h и book.cpp

    //сделал

	//Задание 1. Создаем «картотеку».
	//«Картотека» - это массив структур => нужно такой массив создать.
	//Замечание: размер массива придется увеличиватьпо мере добавления книг =>
	//кКаким должен быть такой массив???
	

	//Пользователь должен иметь возможность по своему желанию выполнять
	//разные действия с картотекой => нужно такую возможность ему
	//предоставить: это может выглядеть как вывод "меню" (перечень
	//возможных действий и соответствующих реакций пользователя), например:
	//Распечатать содержимое картотеки (1)
	//Ввести новую книгу (2)
	//Удалить существующую(ие) (3)
	//Записать текущее содержимое картотеки в файл (4)
	//Считать из файла содержимое в картотеку (5)
	//...
	//Выход из программы (...)


	//Реализуйте посредством функций разные возможности работы с картотекой




	//Подсказка1: для файлового ввода/вывода используйте функции fprintf и fscanf
	//(заголовочный файл <cstdio>



	// Подсказка2: удобно в качестве первого данного в файле хранить количество
	// книг в картотеке
	//Если файл существует и его удалось открыть
	//if()
	//{
	//Чтение данных из файла
	//а) считали количество элементов
	//б) создали массив требуемой размерности
	//в) считали данные из файла в массив
	//}




	//****************************************************************
	//Задание 2. Предоставьте пользователю возможность выводить перечень книг
	//в определенном порядке => напишите функцию (функции) сортировки массива
	//по любому из полей структуры.
	//Замечание: признак - "по какому полю сортируем" можно ввести с помощью
	//перечисления.
    std::vector<Book> catalog;
    char filename[] = "catalog.txt";

    while (true) {
        std::cout << "\nМеню:\n"
                  << "1. Вывести каталог\n"
                  << "2. Добавить книгу\n"
                  << "3. Удалить книгу\n"
                  << "4. Сохранить в файл\n"
                  << "5. Загрузить из файла\n"
                  << "6. Сортировать каталог\n"
                  << "7. Выйти\n"
                  << "Выберите вариант: ";

        int choice;
        std::cin >> choice;

        switch (choice) {
            case 1:
                print_catalog(catalog);
                break;
            case 2:
                add_book(catalog);
                break;
            case 3:
                delete_book(catalog);
                break;
            case 4:
                save_to_file(catalog, filename);
                break;
            case 5:
                load_from_file(catalog, filename);
                break;
            case 6: {
                std::cout << "Сортировать по (0: Автор, 1: Название, 2: Год выпуска, 3: Стоимость, 4: Жанр): ";
                int field;
                std::cin >> field;
                sort_catalog(catalog, static_cast<SortField>(field));
                break;
            }
            case 7:
                return 0;
            default:
                std::cout << "Некорректный выбор.\n";
        }
    }

    return 0;
}